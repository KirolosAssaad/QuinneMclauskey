\documentclass[11pt, a4paper]{article}
\usepackage[utf8]{inputenc}
\usepackage{amsthm}
\usepackage{amsmath, amssymb}
\usepackage{xcolor}
\usepackage{graphicx}
\theoremstyle{plain}
\newtheorem{theorem}{Theorem}[section]
\newtheorem{corollary}[theorem]{Corollary}
\newtheorem{definition}[theorem]{Definition}
\newtheorem{example}[theorem]{Example}

\parindent=0mm
\parskip=1.9mm
\linespread{1.1}

\renewcommand\qedsymbol{$\blacksquare$}
\renewcommand{\restriction}{\mathord{\upharpoonright}}

\binoppenalty=\maxdimen
\relpenalty=\maxdimen





\title{Report on Quine-McClauskey Tabular Algorithm in C++}
\author{John El Gallab \\ ID: 900193761 \\ Kirolos Assaad\\ID:900191250\\under the supervision of Dr. Mohamed Shalan  \\Computer Science and Engineering Department\\The American University in Cairo}
\date{Fall 2020}



\begin{document}
\maketitle


\vspace{1cm}
\begin{center}
\textit{``This report has been compiled using overleaf and LaTeX 2.0 "}
\end{center}

\clearpage

\section{Objective}

The main objective of this project is to explore the Quine McCluskey method’s algorithm and how it
works by minimizing the expected output of a set of minterms and don’t care terms. The stated objective
is to be fulfilled by implementing the said method using C++, which would oblige us to go over every
possible case; such as having all possible minterms for a set number of variables or none of the minterms
at all.




\section{Introduction}
To be able to understand how the McCluskey method works we need to look more into how it was
created, as well as why it is better than some of the other minimizing methods like the Karnaugh Map and
the Espresso heuristic logic minimizer.


\subsection{Original Creators}
The Quine McCluskey method carries this name as it was cocreated by two scientists at two different
years; first of them being Willard Quine in 1952 and the other being Edward McCluskey in 1956. Even
though the first discovery of this method was by Hugh McColl in 1878 and was later vouched for by
Archie Blake in 1937, Quine and McCluskey took the whole credit for it.


\subsection{How it works}
This Method works by iterating through binary equivalent of all the minterms and don’t care terms and
comparing them. If there is a difference of one between the two minterms (e.g: 000 and 001), this number
is eliminated and is replaced with a dash. This repeated across all minterms, across all the implicants
obtained from the previous steps. The same iteration is repeated until there can be no further comparisons,
which would give out all the prime implicants. The prime implicants are to be put in a coverage table,
which consists of the minterms and the prime implicants obtained from the previous set of steps. If any of
the minterms is only repeated once, the corresponding prime implicants are marked as essential, which
means that they must be written for the function to work. Then, if any of the rest of the minterms pass
through all the prime implicants they are crossed out as they would pass through all of the prime
implicants, thus if any of them were to be used they would pass through it. If any of the prime implicants
correspond to a minterm covered by another prime implicant, this minterm is called a dominated one,
which is also crossed out as it will be covered by another minterm. The last couple of steps will be
repeated until no further iterations can take place. The remaining prime implicants from the previous steps
in the coverage table are to be added together to give out the sum of products of the function (SOP).


\subsection{QM Algorithm verus K-Map Method}
Although this method has its flaws such as being very time consuming, it still overpowers the other two
most popular minimization methods known; the Karnaugh map (K-map) and the espresso method. The
Karnaugh map method is thought to be one of the easiest methods used up to four variables, then the
complexity of the map increases as multidimensional maps are needed to be able to successfully obtain
the final Boolean expression. On the other hand, the Quine McCluskey method only requires repeating
the same iteration method a set of times until no further iterations are possible.

\subsection{QM Algorithm vs Espresso Method}
The Espresso method is also one of the most well-known minimizers due to its very fast execution.
Although this method is thought to be one of the fastest if not the fastest, it still has its flaws, as it gives
up minimality for speed. When this method is used, usually the user is willing to give up the accuracy and
the precision of the final Boolean expression, just for speed. Upon looking at the previous two examples,
we can easily determine the Quine McCluskey method as one of the top ones, as it has low complexity,
precision and minimality.


\section{Documentation}
In this section, all of the functions used in the code will be written with their a brief definition of what
they are responsible for.

\subsection{fetchFromFile}
This function gives out the number of variables, a vector of all the minterms and another one for all the
don’t care terms, and a final one that has both the minterms and the don’t care terms together.

\subsection{decToBinInterior}
This function converts its parameter from decimal to binary and returns it.

\subsection{decToBinary}
This function calls on the previous function ( decToBinInterior) to loop over the vector needed to be
converted.

\subsection{padding}
This function adds zeros to the beginning of a function so that all the minterms and don’t care terms are of
the same size, which is the variable size. (e.g.: 10 becomes 0010 if the number of variables inputted in 4)

\subsection{printVector}
This function takes a vector of strings and prints out all the terms it is carrying.

\subsection{printDoubleVector}
This function takes a vector of doubles and prints out all the terms it is carrying.

\subsection{removeRedundancy}
This function loops over a vector of strings and removes any duplicate in it.

\subsection{removeRedundancyDecimal}
This function loops over a vector of doubles and removes any duplicates in it.

\subsection{checkDiff}
This function checks the difference between two strings and if the number of differences is one, it is
replaced with a dash.

\subsection{getIteration:}
This function pushes back the ith prime implicant.

\subsection{primeImplicantGenerator}
This function loops on the iteration function to get the whole list of prime implicants.

\subsection{EPImin}
This function gives out the minterms of all the essential prime implicants.

\subsection{possibility}
This function checks and pushes back one essential prime implicant if found at string a.

\subsection{EPI}
This function loops over the previous function getting the list of all essential prime implicants.

\subsection{nonused}
This function returns the decimal of all the minterms that have not been used due to not being essential.

\subsection{boolexpression}
This function takes the essential prime implicants and returns the Boolean expression of it.

\subsection{printallPI}
This function prints the binary representation of the prime implicants as well as the minterms and the
don’t care terms used in them.

\subsection{allonescounter}
This function checks the corner case of all the minterms and don’t care terms are one which means the
final prime implicant is just dashes and only returns one.

\subsection{runProgram}
This function runs the whole program and is called at in the int main function.



\section{Corner Cases}
List of all corner cases that out algorithm handles

\subsection{All zeros}
If a variable number is given, but there are no minterms or don’t care terms (which means that all of their
values are zero) the code exits and outputs 0.

\subsection{All Ones}
If all the possibilities of a variable is written either as minterms or don’t care terms (resulting in a prime
implicant of all dases) the function outputs one and exits the code.

\subsection{Mistakes in file}
If any error was detected during the validation of the input file, the code exits and gives out a warning.


























\section{Test cases}

Test cases have been test against values from other methods that are known to work to ensure that our program runs as expected. All test cases produced output as expected; thus, our algorithm is deemed accurate. Our test cases also cover corner cases that our code handles well. All inputs to test cases can be found within the text files attached to the project. If any of the below figure are not clear they are also attached with the project :)

\subsection{Test case 1}
\begin{center}
    \includegraphics[\textwidth]{test1.png}
    \captionof{Figure: }{Output of Test Case 1}
    \label{fig: W}
\end{center}
\subsection{Test case 2}

\begin{center}
    \includegraphics[\textwidth]{test2.png}
    \captionof{Figure: }{Output of Test Case 2}
    \label{fig: W}
\end{center}

\subsection{Test case 3}


\begin{center}
    \includegraphics[\textwidth]{test3.png}
    \captionof{Figure: }{Output of Test Case 3}
    \label{fig: W}
\end{center}

\subsection{Test case 4}


\begin{center}
    \includegraphics[\textwidth]{test4-1.png}
    \captionof{Figure: }{Output of Test Case 4 part 1}
    \label{fig: W}
\end{center}

\begin{center}
    \includegraphics[\textwidth]{test4-2.png}
    \captionof{Figure: }{Output of Test Case 4 part 2}
    \label{fig: W}
\end{center}


\subsection{Test case 5}


\begin{center}
    \includegraphics[\textwidth]{test5.png}
    \captionof{Figure: }{Output of Test Case 5}
    \label{fig: W}
\end{center}




\subsection{Test case 6}



\begin{center}
    \includegraphics[\textwidth]{test6.png}
    \captionof{Figure: }{Output of Test Case 6}
    \label{fig: W}
\end{center}

\subsection{Test case 7}



\begin{center}
    \includegraphics[\textwidth]{test7.png}
    \captionof{Figure: }{Output of Test Case 7}
    \label{fig: W}
\end{center}

\subsection{Test case 8}




\begin{center}
    \includegraphics[\textwidth]{test8.png}
    \captionof{Figure: }{Output of Test Case 8}
    \label{fig: W}
\end{center}

\subsection{Test case 9}




\begin{center}
    \includegraphics[\textwidth]{test9.png}
    \captionof{Figure: }{Output of Test Case 9}
    \label{fig: W}
\end{center}
\subsection{Test case 10}

\begin{center}
    \includegraphics[\textwidth]{test10.png}
    \captionof{Figure: }{Output of Test Case 10}
    \label{fig: W}
\end{center}




\section{Errors in the Submission}
Although many errors were encountered during the process of creation, production, and debugging of this C++ code, no errors are present in the submitted algorithm and runs perfectly fine for all cases of variable size up to 23 variables.


\section{readme file}

Hello :)
To access the source code you will either find it attached to the blackboard assignment itself or in github using this link under the main branch: 
Please make sure that you have signed into your github account inorder to be able to open the link :)
https://github.com/johnelgallab/QM_Project
-------------------------------------------------------------------------------------------------
to build the program please add the file called final_main.cpp to a solution in either visual studio or xcode in order to build and run it.
make sure to add your inputs with a file called "input.txt" which is saved under the same directory as the final_main.cpp
data inside the input.txt file must follow the same format as the assignment sheet.
only difference is that you must add '!' without the quotes after the last comma in the second and the thir line. 
i.e.:
4
3,4,5,!7
2,!10
this data corresponds to 4 variables, minterms are 3 and 4 and 5 and 7 and don't care terms are 2 and 10.
another i.e.
3
,!3
,!4
this data corresponds to 3 variables, minterm is 3, and don't care term is 4.
for more input examples: please check the test cases attached called input_1 and input_2 till input_10
---------------------------------------------------------------------------------------------- 
John El Gallab
Kirolos Assaad




\section{Contributions}




Kirolos Morcos has created the following functions:
functions 12,13,14,15,16,17,18, and 19.
He has also debugged the remaining functions and helped in catching errors and corner cases in the remaining of the code.

John El Gallab has created the following functions:
function 1,2,3,4,5,6,7,8,9,10, and 11.
He has also debugged the remaining functions and helped in catching errors and corner cases in the remaining of the code.





\end{document}